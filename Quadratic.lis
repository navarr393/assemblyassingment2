     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Quadratic Formula".  This program demonstrates the input of three float numbers, a, b and c and calculates  *
     3                                  ;the roots of the quadratic equation formed using the quadratic formula.                                                    *                                                                                                             *
     4                                  ;Copyright (C) 2021 David Navarro.                                                                                          *
     5                                  ;                                                                                                                           *
     6                                  ;This file is part of the software program "Quadratic formula".                                                             *
     7                                  ;Quadratic Formula is free software: you can redistribute it and/or modify it under the terms of the GNU General            *
     8                                  ;Public License                                                                                                             *
     9                                  ;version 3 as published by the Free Software Foundation.                                                                    *
    10                                  ;Quadratic Formula is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied    *
    11                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    12                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    13                                  ;****************************************************************************************************************************
    14                                  
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;
    18                                  ;Author information
    19                                  ;  Author name: David Navarro
    20                                  ;  Author email: navarrod253@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Quadratic Formula
    24                                  ;  Programming languages: One module in C, two modules in c++, and one module in X86
    25                                  ;  Date program began: Feb-20-2021
    26                                  ;  Date of last update: Feb-28-2021
    27                                  ;  Date of reorganization of comments: Feb-28-2021
    28                                  ;  Files in this program: second_degree.c, quadratic.asm, isfloat.cpp, quadlibrary.cpp, run.sh
    29                                  ;  Status: Finished.  The program was tested extensively with no errors in Xubuntu19.04.
    30                                  ;
    31                                  ;This file
    32                                  ;   File name: quadratic.asm
    33                                  ;   Language: X86 with Intel syntax.
    34                                  ;   Max page width: 293 columns
    35                                  ;   Assemble: nasm -f elf64 -l Quadratic.lis -o Quadratic.o Quadratic.asm
    36                                  
    37                                  
    38                                  ;===== Begin code area ================================================================================================
    39                                  global Quadratic
    40                                  extern printf
    41                                  extern scanf
    42                                  extern isfloat
    43                                  extern atof
    44                                  extern show_no_root
    45                                  extern show_one_root
    46                                  extern show_two_root
    47                                  
    48                                  section .data
    49                                      
    50 00000000 546869732070726F67-         welcome db "This program will find the roots of any quadratic equation.",10,0
    50 00000009 72616D2077696C6C20-
    50 00000012 66696E642074686520-
    50 0000001B 726F6F7473206F6620-
    50 00000024 616E79207175616472-
    50 0000002D 617469632065717561-
    50 00000036 74696F6E2E0A00     
    51 0000003D 506C6561736520656E-         input_floats db "Please enter the three floating point coefficients of a quadratic equation in the order a, b, c separated by white spaces. Then press enter:",0
    51 00000046 746572207468652074-
    51 0000004F 6872656520666C6F61-
    51 00000058 74696E6720706F696E-
    51 00000061 7420636F6566666963-
    51 0000006A 69656E7473206F6620-
    51 00000073 612071756164726174-
    51 0000007C 696320657175617469-
    51 00000085 6F6E20696E20746865-
    51 0000008E 206F7264657220612C-
    51 00000097 20622C206320736570-
    51 000000A0 617261746564206279-
    51 000000A9 207768697465207370-
    51 000000B2 616365732E20546865-
    51 000000BB 6E2070726573732065-
    51 000000C4 6E7465723A00       
    52 000000CA 5468616E6B20796F75-         output_formula db "Thank you. The equation is  %0.12lfx^2  +  %0.12lfx  +  %0.12lf  =  0.0",10,0
    52 000000D3 2E2054686520657175-
    52 000000DC 6174696F6E20697320-
    52 000000E5 2025302E31326C6678-
    52 000000EE 5E3220202B20202530-
    52 000000F7 2E31326C667820202B-
    52 00000100 202025302E31326C66-
    52 00000109 20203D2020302E300A-
    52 00000112 00                 
    53 00000113 496E76616C69642069-         invalid_input db "Invalid input data detected.  You may run this program again.",10,0
    53 0000011C 6E7075742064617461-
    53 00000125 206465746563746564-
    53 0000012E 2E2020596F75206D61-
    53 00000137 792072756E20746869-
    53 00000140 732070726F6772616D-
    53 00000149 20616761696E2E0A00 
    54 00000152 257300                      three_floats db "%s",0
    55 00000155 257300                      three_floats2 db "%s",0
    56 00000158 257300                      three_floats3 db "%s",0
    57                                  
    58                                  
    59                                  section .bss  
    60                                  
    61                                  section .text
    62                                  Quadratic:
    63                                  
    64                                      ; Back up all registers and set stack pointer to base pointer
    65 00000000 55                          push rbp
    66 00000001 4889E5                      mov rbp, rsp
    67 00000004 57                          push rdi
    68 00000005 56                          push rsi
    69 00000006 52                          push rdx
    70 00000007 51                          push rcx
    71 00000008 4150                        push r8
    72 0000000A 4151                        push r9
    73 0000000C 4152                        push r10
    74 0000000E 4153                        push r11
    75 00000010 4154                        push r12
    76 00000012 4155                        push r13
    77 00000014 4156                        push r14
    78 00000016 4157                        push r15
    79 00000018 53                          push rbx
    80 00000019 9C                          pushf
    81                                  
    82                                     ; push qword -1                   ; Extra push to create even number of pushes
    83                                  
    84                                  ; ----------------------------------------------------------------------
    85                                  ;display welcome message
    86 0000001A B801000000              mov rax, 1
    87 0000001F 48BF-                   mov rdi, welcome 
    87 00000021 [0000000000000000] 
    88 00000029 E8(00000000)            call printf
    89                                  
    90                                  ; ----------------------------------------------------------------------
    91                                  ;Display message to input the floats
    92 0000002E 6A00                    push qword 0
    93 00000030 B800000000              mov rax, 0
    94 00000035 48BF-                   mov rdi, input_floats         
    94 00000037 [3D00000000000000] 
    95 0000003F E8(00000000)            call printf
    96 00000044 58                      pop rax
    97                                  
    98                                  ;----------------------------------------------------------------------
    99                                  ;Block to input the string
   100 00000045 4881EC00040000          sub rsp, 1024
   101 0000004C B800000000              mov rax, 0
   102 00000051 48BF-                   mov rdi, three_floats
   102 00000053 [5201000000000000] 
   103 0000005B 4889E6                  mov rsi, rsp
   104 0000005E E8(00000000)            call scanf
   105                                  
   106                                  ; ------------------------------------------------------------------------  
   107                                  ;Block to validate the recent input                                                                                   
   108 00000063 4889E7                  mov rdi, rsp                                                                                                         
   109 00000066 E8(00000000)            call isfloat ;call isfloat 
   110                                  
   111 0000006B 4883F800                cmp rax, 0   ;if rax == 0 then 
   112 0000006F 0F84AA010000            je invalid   ;jump to invalid  
   113                                  ;convert to float
   114 00000075 B800000000              mov rax, 0                                                                                                            
   115 0000007A 4889E7                  mov rdi,rsp                                                                                                           
   116 0000007D E8(00000000)            call atof
   117 00000082 F2440F10F8              movsd xmm15, xmm0 ;xmm15 now holds string 1
   118                                  ;-----------------------------------------------------------------------
   119                                  ;input the second string float 
   120 00000087 4881EC00040000          sub rsp, 1024
   121 0000008E B800000000              mov rax, 0
   122 00000093 48BF-                   mov rdi, three_floats2
   122 00000095 [5501000000000000] 
   123 0000009D 4889E6                  mov rsi, rsp
   124 000000A0 E8(00000000)            call scanf
   125                                  ; ------------------------------------------------------------------------  
   126                                  ;Block to validate the second string input                                                                                   
   127 000000A5 4889E7                  mov rdi, rsp                                                                                                         
   128 000000A8 E8(00000000)            call isfloat ;call isfloat 
   129                                  
   130 000000AD 4883F800                cmp rax, 0 ;if rax == 0 then 
   131 000000B1 0F8485010000            je invalid2 ;jump to invalid  
   132                                  ;convert to float
   133 000000B7 B800000000              mov rax, 0                                                                                                            
   134 000000BC 4889E7                  mov rdi,rsp                                                                                                           
   135 000000BF E8(00000000)            call atof
   136 000000C4 F2440F10F0              movsd xmm14, xmm0 ;xmm14 now holds string number 2
   137                                  ;-----------------------------------------------------------------------
   138                                  ;input the third string float 
   139 000000C9 4881EC00040000          sub rsp, 1024
   140 000000D0 B800000000              mov rax, 0
   141 000000D5 48BF-                   mov rdi, three_floats3
   141 000000D7 [5801000000000000] 
   142 000000DF 4889E6                  mov rsi, rsp
   143 000000E2 E8(00000000)            call scanf
   144                                  ; ------------------------------------------------------------------------  
   145                                  ;Block to validate the third string input                                                                                   
   146 000000E7 4889E7                  mov rdi, rsp                                                                                                         
   147 000000EA E8(00000000)            call isfloat ;call isfloat 
   148                                  
   149 000000EF 4883F800                cmp rax, 0 ;if rax == 0 then 
   150 000000F3 0F8467010000            je invalid3 ;jump to invalid  
   151                                  ;convert to float
   152 000000F9 B800000000              mov rax, 0                                                                                                            
   153 000000FE 4889E7                  mov rdi,rsp                                                                                                           
   154 00000101 E8(00000000)            call atof
   155 00000106 F2440F10E8              movsd xmm13, xmm0 ;xmm13 now holds string number 3
   156                                  
   157 0000010B EB00                    jmp valid ;jumps to valid 
   158                                  
   159                                  
   160                                  valid:
   161                                  ;print the formula               
   162 0000010D B803000000              mov rax, 3                     
   163 00000112 48BF-                   mov rdi, output_formula      
   163 00000114 [CA00000000000000] 
   164 0000011C F2410F10C7              movsd xmm0, xmm15 ;first string converted to float
   165 00000121 F2410F10CE              movsd xmm1, xmm14 ;second string converted to float
   166 00000126 F2410F10D5              movsd xmm2, xmm13 ;third string converted to float            
   167 0000012B E8(00000000)            call printf
   168                                  
   169                                  ;convert -b
   170 00000130 F2450F10C7              movsd xmm8, xmm15  ;this makes a copy of a
   171 00000135 F2450F10E6              movsd xmm12, xmm14 ;this makes a copy of b 
   172 0000013A 49C7C1FFFFFFFF          mov r9, -1 
   173 00000141 F24D0F2AD9              cvtsi2sd xmm11, r9 ;xmm11 now is -1
   174 00000146 F2450F59DC              mulsd xmm11,xmm12  ;xmm11 = xmm11 * xmm12 (-b)
   175 0000014B F2410F10EB              movsd xmm5, xmm11  ;copy of -b
   176                                  
   177                                  ;convert 2a
   178 00000150 41BB02000000            mov r11, 2  
   179 00000156 F2490F2AE3              cvtsi2sd xmm4, r11
   180 0000015B F2410F59E0              mulsd xmm4, xmm8   ;2a
   181                                  
   182                                  ;do b^2-4ac 
   183 00000160 F2450F59F6              mulsd xmm14, xmm14 ;b^2
   184 00000165 41B804000000            mov r8, 4 
   185 0000016B F24D0F2AD0              cvtsi2sd xmm10, r8 ;converts 4 to float and stores it in xmm10
   186 00000170 F2450F59D7              mulsd xmm10, xmm15 ;4a
   187 00000175 F2450F59D5              mulsd xmm10, xmm13 ;4ac
   188 0000017A F2450F5CF2              subsd xmm14, xmm10 ;b^2-4ac 
   189                                  ;movsd xmm9, xmm14  ;makes a copy of b^2-4ac
   190                                  
   191 0000017F F2450F51CE              sqrtsd xmm9, xmm14 ;square root of b^2-4ac and stores it in xmm6
   192 00000184 F2450F5CD9              subsd xmm11, xmm9  ;-b - sqrt of b^2-4ac
   193 00000189 F2440F5EDC              divsd xmm11, xmm4  ;-b - sqrt of b^2-4ac / 2a
   194                                  
   195 0000018E F2410F58E9              addsd xmm5, xmm9   ;-b + sqrt of b^2-4ac
   196 00000193 F20F5EEC                divsd xmm5, xmm4   ;-b + sqrt of b^2-4ac / 2
   197                                  
   198                                  ;if xmm14 < 0 then call show no root
   199 00000197 41BA00000000            mov r10, 0
   200 0000019D F2490F2AFA              cvtsi2sd xmm7, r10
   201 000001A2 66440F2EF7              ucomisd xmm14, xmm7 ;comapares if b^2-4ac is negative if it is jumps to show_no_root
   202 000001A7 774C                    ja two_roots
   203                                  
   204 000001A9 7402                    je one_root
   205                                  
   206 000001AB EB29                    jmp no_root
   207                                  
   208                                  one_root:
   209 000001AD B801000000              mov rax, 1
   210 000001B2 F2410F10C3              movsd xmm0, xmm11
   211 000001B7 E8(00000000)            call show_one_root
   212 000001BC 4881C400040000          add rsp, 1024
   213 000001C3 4881C400040000          add rsp, 1024
   214 000001CA 4881C400040000          add rsp, 1024
   215 000001D1 E9B5000000              jmp conclusion
   216                                  
   217                                  
   218                                  no_root:
   219 000001D6 E8(00000000)            call show_no_root
   220 000001DB 4881C400040000          add rsp, 1024
   221 000001E2 4881C400040000          add rsp, 1024
   222 000001E9 4881C400040000          add rsp, 1024
   223 000001F0 E996000000              jmp conclusion
   224                                  
   225                                  two_roots:                
   226 000001F5 B802000000              mov rax, 2
   227 000001FA F2410F10C3              movsd xmm0, xmm11
   228 000001FF F20F10CD                movsd xmm1, xmm5 
   229 00000203 E8(00000000)            call show_two_root
   230 00000208 4881C400040000          add rsp, 1024
   231 0000020F 4881C400040000          add rsp, 1024
   232 00000216 4881C400040000          add rsp, 1024
   233                                  
   234 0000021D EB6C                    jmp conclusion
   235                                  
   236                                  invalid:
   237                                  ;display invalid message
   238 0000021F B801000000              mov rax, 1 
   239 00000224 48BF-                   mov rdi, invalid_input
   239 00000226 [1301000000000000] 
   240 0000022E E8(00000000)            call printf
   241 00000233 4881C400040000          add rsp, 1024
   242                                  
   243 0000023A EB4F                    jmp conclusion
   244                                  
   245                                  invalid2:
   246 0000023C B801000000              mov rax, 1
   247 00000241 48BF-                   mov rdi, invalid_input
   247 00000243 [1301000000000000] 
   248 0000024B E8(00000000)            call printf
   249 00000250 4881C400040000          add rsp, 1024
   250 00000257 4881C400040000          add rsp, 1024
   251                                  
   252 0000025E EB2B                    jmp conclusion
   253                                  
   254                                  invalid3:
   255 00000260 B801000000              mov rax, 1
   256 00000265 48BF-                   mov rdi, invalid_input
   256 00000267 [1301000000000000] 
   257 0000026F E8(00000000)            call printf
   258 00000274 4881C400040000          add rsp, 1024
   259 0000027B 4881C400040000          add rsp, 1024
   260 00000282 4881C400040000          add rsp, 1024
   261                                  
   262 00000289 EB00                    jmp conclusion
   263                                  
   264                                  
   265                                  ; ------------------------------------------------------------------------
   266                                  conclusion:
   267 0000028B F2410F10C3              movsd xmm0, xmm11
   268                                  
   269                                  ;pop rax                         ; Remove extra push of -1 from stack.    
   270                                  
   271                                  ; Restores all registers to their original state.
   272 00000290 9D                      popf                                                 
   273 00000291 5B                      pop rbx                                                     
   274 00000292 415F                    pop r15                                                     
   275 00000294 415E                    pop r14                                                      
   276 00000296 415D                    pop r13                                                      
   277 00000298 415C                    pop r12                                                      
   278 0000029A 415B                    pop r11                                                     
   279 0000029C 415A                    pop r10                                                     
   280 0000029E 4159                    pop r9                                                      
   281 000002A0 4158                    pop r8                                                      
   282 000002A2 59                      pop rcx                                                     
   283 000002A3 5A                      pop rdx                                                     
   284 000002A4 5E                      pop rsi                                                     
   285 000002A5 5F                      pop rdi                                                     
   286 000002A6 5D                      pop rbp
   287                                  
   288 000002A7 C3                      ret
